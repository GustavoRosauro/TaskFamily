{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","lista","setLista","listaFilter","setListaFilter","show","setShow","editShow","setEditShow","titulo","descricao","finalizado","itemEdit","setItemEdit","handleClose","a","carregar","handleCloseEdit","useEffect","axios","get","data","console","log","salvar","post","item","then","deletar","id","delete","deletarTodos","alterar","novoItem","sendItem","put","HandleInputChange","e","target","name","value","className","onClick","style","float","colSpan","placeholder","onChange","filter","x","toUpperCase","includes","map","key","type","checked","handleShowEdit","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,uMCgJ5BC,EA3IH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACTC,EADS,KACHC,EADG,OAEqBF,mBAAS,IAF9B,mBAETG,EAFS,KAEGC,EAFH,OAGQJ,oBAAS,GAHjB,mBAGTK,EAHS,KAGHC,EAHG,OAIeN,oBAAS,GAJxB,mBAITO,EAJS,KAIAC,EAJA,OAKgBR,mBAAS,CACvCS,OAAO,GACPC,UAAU,GACVC,WAAW,IARG,mBAKTC,EALS,KAKCC,EALD,KAUVC,EAAW,uCAAG,sBAAAC,EAAA,6DAClBT,GAAQ,GADU,SAEZU,IAFY,2CAAH,qDAMXC,EAAe,uCAAG,sBAAAF,EAAA,6DACtBP,GAAY,GADU,SAEhBQ,IAFgB,2CAAH,qDAQrBE,oBAAS,sBAAC,sBAAAH,EAAA,sEACFC,IADE,2CAER,IACF,IAAMA,EAAQ,uCAAG,4BAAAD,EAAA,sEACEI,IAAMC,IAAI,UADZ,OACXC,EADW,OAEfnB,EAASmB,EAAKA,MACdjB,EAAeiB,EAAKA,MACpBC,QAAQC,IAAIF,EAAKA,MAJF,2CAAH,qDAMRG,EAAM,uCAAG,sBAAAT,EAAA,sEACPI,IAAMM,KAAK,SAASC,GAAMC,KAA1B,cAAAZ,EAAA,MAA+B,sBAAAA,EAAA,sDACnCD,IADmC,4CADxB,2CAAH,qDAKNc,EAAO,uCAAG,WAAOC,GAAP,SAAAd,EAAA,sEACPI,IAAMW,OAAN,iBAAuBD,IAAMF,KAA7B,cAAAZ,EAAA,MAAkC,sBAAAA,EAAA,sEAChCC,IADgC,4CAD3B,2CAAH,sDAKPe,EAAY,uCAAG,sBAAAhB,EAAA,sEACbI,IAAMW,OAAN,UAAuBH,KAAvB,cAAAZ,EAAA,MAA4B,sBAAAA,EAAA,sEAC1BC,IAD0B,4CADf,2CAAH,qDAMbgB,EAAO,uCAAG,WAAMC,GAAN,eAAAlB,EAAA,6DACVmB,EAAU,CACbvB,WAAmC,KAAvBsB,EAAStB,WAAkB,IAAI,KAF9B,SAITQ,IAAMgB,IAAN,iBAAoBF,EAASJ,IAAKK,GAAUP,KAA5C,cAAAZ,EAAA,MAAiD,sBAAAA,EAAA,sEAC/CC,IAD+C,4CAJxC,2CAAH,sDAQPoB,EAAoB,SAACC,GAAM,IAAD,EACTA,EAAEC,OAAhBC,EADuB,EACvBA,KAAKC,EADkB,EAClBA,MACZ3B,EAAY,2BACPD,GADM,kBACI2B,EAAOC,MAGnBd,EAAO,CACTjB,OAAO,GACPC,UAAU,GACVC,WAAW,GAEb,OACE,yBAAK8B,UAAU,aACb,gDACA,4BAAQA,UAAU,kBAAkBC,QAzDrB,kBAAMpC,GAAQ,KAyD7B,kBACA,4BAAQmC,UAAU,iBAAiBE,MAAO,CAACC,MAAM,SAAUF,QAAS,kBAAIX,MAAxE,0BACA,2BAAOU,UAAU,uBACf,+BACE,4BACE,sCACA,yCACA,4CAGJ,+BACE,4BACA,wBAAII,QAAS,KAAK,2BAAOJ,UAAU,eAAeK,YAAY,cAAcC,SAAU,SAACV,GAAD,OAAKnC,EAASC,EAAY6C,QAAO,SAAAC,GAAC,OAAIA,EAAExC,OAAOyC,cAAcC,SAASd,EAAEC,OAAOE,MAAMU,wBAGzKjD,EAAMmD,KAAI,SAAA1B,GAAI,OACZ,wBAAI2B,IAAK3B,EAAKG,IACZ,4BAAKH,EAAKjB,QACV,4BAAKiB,EAAKhB,WACV,4BAAI,2BAAO4C,KAAM,WAAYC,QAA6B,MAApB7B,EAAKf,WAAoBoC,SAAU,kBAAIf,EAAQN,OACrF,4BAAI,4BAAQe,UAAU,iBAAiBC,QAAS,kBAAId,EAAQF,EAAKG,MAA7D,YACJ,4BAAI,4BAAQY,UAAU,kBAAkBC,QAAS,kBAxExC,SAAChB,GACtBb,EAAYa,GACZlB,GAAY,GAsEqDgD,CAAe9B,KAAhE,iBAKd,kBAAC+B,EAAA,EAAD,CAAOpD,KAAMA,EAAMqD,OAAQ5C,GACzB,kBAAC2C,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,wBAEF,kBAACJ,EAAA,EAAMK,KAAP,KACE,yCACA,2BAAOrB,UAAU,eAAeM,SAAU,SAACV,GAAD,OAAKX,EAAKjB,OAAS4B,EAAEC,OAAOE,SACtE,4CACA,2BAAOC,UAAU,eAAeM,SAAU,SAACV,GAAD,OAAKX,EAAKhB,UAAY2B,EAAEC,OAAOE,UAE3E,kBAACiB,EAAA,EAAMM,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYvB,QAAS5B,GAArC,UAGA,kBAACkD,EAAA,EAAD,CAAQC,QAAQ,UAAUvB,QAASlB,GAAnC,YAKJ,kBAACiC,EAAA,EAAD,CAAOpD,KAAME,EAAUmD,OAAQzC,GAC7B,kBAACwC,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,wBAEF,kBAACJ,EAAA,EAAMK,KAAP,KACE,yCACA,2BAAOrB,UAAU,eAAeD,MAAO5B,EAASH,OAAQsC,SAAUX,IAClE,4CACA,2BAAOK,UAAU,eAAeD,MAAO5B,EAASF,UAAWqC,SAAUX,KAEvE,kBAACqB,EAAA,EAAMM,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYvB,QAASzB,GAArC,UAGA,kBAAC+C,EAAA,EAAD,CAAQC,QAAQ,WAAhB,cC3HUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.bba81b1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState,useEffect} from 'react';\nimport {Modal,Button} from 'react-bootstrap'\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nconst App = () => {\n  const [lista,setLista] = useState([]);\n  const [listaFilter,setListaFilter] = useState([]);\n  const [show, setShow] = useState(false);\n  const [editShow,setEditShow] = useState(false);\n  const [itemEdit, setItemEdit] = useState({\n    titulo:'',\n    descricao:'',\n    finalizado:0    \n  })\n  const handleClose = async() => {\n    setShow(false)\n    await carregar();\n  }\n  const handleShow = () => setShow(true);\n\n  const handleCloseEdit = async() => {\n    setEditShow(false)\n    await carregar();\n  }\n  const handleShowEdit = (item) => {\n    setItemEdit(item)\n    setEditShow(true)\n  };\n  useEffect(async()=>{\n    await carregar();\n  },[])\n  const carregar = async()=>{\n    let data = await axios.get('/tasks');\n    setLista(data.data);\n    setListaFilter(data.data);\n    console.log(data.data);\n  }\n  const salvar = async()=>{\n    await axios.post('/tasks',item).then(async()=>{\n      handleClose();\n    });   \n  }\n  const deletar = async (id)=>{\n     await axios.delete(`/tasks/${id}`).then(async()=>{\n       await carregar();\n     });    \n  }\n  const deletarTodos = async ()=>{\n    await axios.delete(`/tasks`).then(async()=>{\n      await carregar();\n    });    \n }\n \n const alterar = async(novoItem)=>{\n   let sendItem ={    \n    finalizado: novoItem.finalizado == \"0\"?\"1\":\"0\"\n   }\n  await axios.put(`/tasks/${novoItem.id}`,sendItem).then(async()=>{\n    await carregar();\n  })\n }\n const HandleInputChange = (e) =>{\n   const {name,value} = e.target;\n   setItemEdit({\n     ...itemEdit,[name]: value\n   }) \n }\n  let item = {\n    titulo:'',\n    descricao:'',\n    finalizado:0\n  }\n  return (\n    <div className='col-md-12'>\n      <h1>Marcador Tarefas</h1>\n      <button className='btn btn-primary' onClick={handleShow}>Cadastrar Item</button>\n      <button className='btn btn-danger' style={{float:'right'}} onClick={()=>deletarTodos()}>Remover todos os itens</button>\n      <table className='table table-striped'>\n        <thead>\n          <tr>\n            <th>Titulo</th>\n            <th>Descricao</th>\n            <th>Finalizado</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n          <td colSpan={\"3\"}><input className=\"form-control\" placeholder='Titulo.....' onChange={(e)=>setLista(listaFilter.filter(x => x.titulo.toUpperCase().includes(e.target.value.toUpperCase())))}/></td>\n          </tr>\n          {\n            lista.map(item =>\n              <tr key={item.id}>\n                <td>{item.titulo}</td>\n                <td>{item.descricao}</td>\n                <td><input type={'checkbox'} checked={item.finalizado === \"1\"} onChange={()=>alterar(item)}/></td>\n                <td><button className='btn btn-danger' onClick={()=>deletar(item.id)}>Remover</button></td>\n                <td><button className=\"btn btn-warning\" onClick={()=>handleShowEdit(item)}>Editar</button></td>\n              </tr>)\n          }\n        </tbody>\n      </table>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Cadastrar Item</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <label>Titulo</label>\n          <input className='form-control' onChange={(e)=>item.titulo = e.target.value}/>\n          <label>Descricao</label>\n          <input className='form-control' onChange={(e)=>item.descricao = e.target.value}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Fechar\n          </Button>\n          <Button variant=\"primary\" onClick={salvar}>\n            Salvar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal show={editShow} onHide={handleCloseEdit}>\n        <Modal.Header closeButton>\n          <Modal.Title>Cadastrar Item</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <label>Titulo</label>\n          <input className='form-control' value={itemEdit.titulo} onChange={HandleInputChange}/>\n          <label>Descricao</label>\n          <input className='form-control' value={itemEdit.descricao} onChange={HandleInputChange}/>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseEdit}>\n            Fechar\n          </Button>\n          <Button variant=\"primary\">\n            Salvar\n          </Button>\n        </Modal.Footer>\n      </Modal>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}